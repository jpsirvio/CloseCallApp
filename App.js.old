import React, { useEffect, useState } from 'react';
import { View, Text, Button, FlatList } from 'react-native';
import * as Location from 'expo-location';
import axios from 'axios';
import * as SQLite from 'expo-sqlite';
import MapView, { Marker } from 'react-native-maps';
import { NavigationContainer } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';

const db = SQLite.openDatabase('db.db'); // Open SQLite database

const AsteroidMap = () => {
  const [location, setLocation] = useState(null);
  const [errorMsg, setErrorMsg] = useState(null);
  const [nearbyAsteroids, setNearbyAsteroids] = useState([]);

  useEffect(() => {
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        setErrorMsg('Permission to access location was denied');
        return;
      }

      let location = await Location.getCurrentPositionAsync({});
      setLocation(location);

      // Call the NASA API with the user's location
      axios.get(`https://api.nasa.gov/neo/rest/v1/feed?api_key=7kAlXl3XmDxE1rf6jEXYeRLjW67ZxeXrQiQwmRNN`)
        .then(response => {
          // Filter the asteroids based on their proximity to the user's location
          const nearbyAsteroids = response.data.near_earth_objects.filter(asteroid => {
            // Add your logic here to determine if the asteroid is near the user's location
          });

          setNearbyAsteroids(nearbyAsteroids);

          // Save the nearby asteroids to the SQLite database
          db.transaction(tx => {
            nearbyAsteroids.forEach(asteroid => {
              tx.executeSql('insert into asteroids (id, name) values (?, ?)', [asteroid.id, asteroid.name]);
            });
          });

          // Check the remaining rate limit
          const remaining = response.headers['x-ratelimit-remaining'];
          console.log(`Remaining rate limit: ${remaining}`);
        })
        .catch(error => console.error(error));
    })();
  }, []);

  return (
    <MapView style={{ flex: 1 }} initialRegion={{
      latitude: location?.coords.latitude,
      longitude: location?.coords.longitude,
      latitudeDelta: 0.0922,
      longitudeDelta: 0.0421,
    }}>
      {nearbyAsteroids.map((asteroid, index) => (
        <Marker
          key={index}
          coordinate={{ latitude: asteroid.latitude, longitude: asteroid.longitude }}
          title={asteroid.name}
        />
      ))}
    </MapView>
  );
}

const SavedAsteroids = () => {
  const [savedAsteroids, setSavedAsteroids] = useState([]);

  useEffect(() => {
    db.transaction(tx => {
      tx.executeSql('select * from asteroids', [], (_, { rows }) =>
        setSavedAsteroids(rows._array)
      );
    });
  }, []);

  const removeAsteroid = (id) => {
    db.transaction(tx => {
      tx.executeSql(`delete from asteroids where id = ?;`, [id]);
    });

    setSavedAsteroids(savedAsteroids.filter(asteroid => asteroid.id !== id));
  }

  return (
    <FlatList
      data={savedAsteroids}
      keyExtractor={(item) => item.id.toString()}
      renderItem={({ item }) => (
        <View style={{ flexDirection: 'row', justifyContent: 'space-between' }}>
          <Text>{item.name}</Text>
          <Button title="Remove" onPress={() => removeAsteroid(item.id)} />
        </View>
      )}
    />
  );
}

const Tab = createBottomTabNavigator();

const App = () => {
  return (
    <NavigationContainer>
      <Tab.Navigator>
        <Tab.Screen name="Map" component={AsteroidMap} />
        <Tab.Screen name="Saved" component={SavedAsteroids} />
      </Tab.Navigator>
    </NavigationContainer>
  );
}

export default App;
